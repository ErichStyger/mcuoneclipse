/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : FATM1.h
**     Project     : ProcessorExpert
**     Processor   : MK64FN1M0VLL12
**     Component   : SD_Card
**     Version     : Component 01.182, Driver 01.00, CPU db: 3.00.000
**     Repository  : Legacy User Components
**     Compiler    : GNU C Compiler
**     Date/Time   : 2016-07-07, 11:18, # CodeGen: 165
**     Abstract    :
**         Implements interface to SD card for FatFs
**     Settings    :
**          Component name                                 : FATM1
**          Block size                                     : 512
**          Cmd wait counter                               : 10
**          Wait Ready Timeout (ms)                        : 500
**          Wait Cmd Timeout (ms)                          : 100
**          Receive Block Timeout (ms)                     : 500
**          SPI Block Transfer                             : no
**          Hardware                                       : 
**            SW SPI                                       : Disabled
**            HW SPI                                       : Enabled
**              Slow Baud Rate Mode                        : 0
**              Fast Baud Rate Mode                        : 1
**              LDD HW SPI                                 : Enabled
**                LDD HW SPI                               : SM2
**              non-LDD HW SPI                             : Disabled
**            SPI Read/Write Macros                        : Disabled
**            Slave Select                                 : Enabled
**              LDD SS                                     : Enabled
**                Slave Select Pin                         : LDDSS
**              non-LDD SS                                 : Disabled
**            Activate                                     : Disabled
**            Card detection                               : Enabled
**              Card Detect is LOW active                  : no
**              LDD CD                                     : Enabled
**                Card detection pin                       : LDDCDI
**              non-LDD CD                                 : Disabled
**            Report 'Card present' if no Card detection pin: yes
**            Write protection                             : Disabled
**          System                                         : 
**            Wait                                         : WAIT1
**            Timeout                                      : TMOUT1
**            RTOS                                         : Disabled
**     Contents    :
**         Activate         - void FATM1_Activate(void);
**         Deactivate       - void FATM1_Deactivate(void);
**         isWriteProtected - bool FATM1_isWriteProtected(void);
**         CardPresent      - bool FATM1_CardPresent(void);
**         WaitReady        - uint8_t FATM1_WaitReady(void);
**         ReceiveDataBlock - bool FATM1_ReceiveDataBlock(uint8_t *data, uint16_t nofBytes);
**         SendDataBlock    - bool FATM1_SendDataBlock(uint8_t *data, uint8_t token, uint16_t nofBytes);
**         SendCmd          - uint8_t FATM1_SendCmd(uint8_t cmd, uint32_t arg);
**         SetSlowMode      - void FATM1_SetSlowMode(void);
**         SetFastMode      - void FATM1_SetFastMode(void);
**         InitCommChannel  - void FATM1_InitCommChannel(void);
**         Deinit           - uint8_t FATM1_Deinit(void* unused);
**         Init             - uint8_t FATM1_Init(void* unused);
**
**     License   :  Open Source (LGPL)
**     Copyright : (c) Copyright Erich Styger, 2012-2016, all rights reserved.
**     Web       : www.mcuoneclipse.com
**     This an open source software implementing an SD card low level driver useful for the the ChaN FatFS, using Processor Expert.
**     This is a free software and is opened for education,  research and commercial developments under license policy of following terms:
**     * This is a free software and there is NO WARRANTY.
**     * No restriction on use. You can use, modify and redistribute it for personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.
**     * Redistributions of source code must retain the above copyright notice.
** ###################################################################*/
/*!
** @file FATM1.h
** @version 01.00
** @brief
**         Implements interface to SD card for FatFs
*/         
/*!
**  @addtogroup FATM1_module FATM1 module documentation
**  @{
*/         

#ifndef __FATM1_H
#define __FATM1_H

/* MODULE FATM1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "SM2.h"
#include "SS1.h"
#include "CD2.h"
#include "WAIT1.h"
#include "TMOUT1.h"
/* interface for FatFS low level disk functions */
#include "diskio.h"

DSTATUS FATM1_disk_initialize (
        uint8_t drv                     /* Physical drive number (0..) */
);
DSTATUS FATM1_disk_status (
        uint8_t drv                     /* Physical drive number (0..) */
);
DRESULT FATM1_disk_read (
        uint8_t drv,                    /* Physical drive number (0..) */
        uint8_t *buff,                  /* Data buffer to store read data */
        uint32_t sector,                /* Sector address (LBA) */
        unsigned int count              /* Number of sectors to read (1..255) */
);
#if _READONLY == 0
DRESULT FATM1_disk_write (
        uint8_t drv,                    /* Physical drive number (0..) */
        const uint8_t *buff,            /* Data to be written */
        uint32_t sector,                /* Sector address (LBA) */
        unsigned int count              /* Number of sectors to write (1..255) */
);
#endif
DRESULT FATM1_disk_ioctl (
        uint8_t drv,                    /* Physical drive number (0..) */
        uint8_t ctrl,                   /* Control code */
        void *buff                      /* Buffer to send/receive control data */
);

#include "Cpu.h"


/* User definitions */

/* distinguished modes for bus activation/deactivation */
#define FATM1_ACTIVATE_MODE_SLOW   0
#define FATM1_ACTIVATE_MODE_FAST   1
#define FATM1_ACTIVATE_MODE_NONE   2

#define FATM1_BLOCK_SIZE   512          /* user defined block size */

/******************************* SD Card Standard Commands **********************************/
#define FATM1_CMD0  (0x40+0)            /* Resets the SD Memory Card */
#define FATM1_CMD1  (0x40+1)            /* Sends host capacity support information and activates the card's
                                           initialization process. HCS is effective when card receives SEND_IF_COND
                                           command. Reserved bits shall be set to '0'. */
#define FATM1_CMD6  (0x40+6)            /* Checks switchable function (mode 0) and switches card function (mode 1).*/
#define FATM1_CMD8  (0x40+8)            /* Sends SD Memory Card interface condition that includes host supply voltage
                                           information and asks the accessed card whether card can operate in supplied
                                           voltage range. Reserved bits shall be set to '0'.*/
#define FATM1_CMD9  (0x40+9)            /* Asks the selected card to send its cardspecific data (CSD)*/
#define FATM1_CMD10 (0x40+10)           /* Asks the selected card to send its card identification (CID) */
#define FATM1_CMD12 (0x40+12)           /* Forces the card to stop transmission in Multiple Block Read Operation */
#define FATM1_CMD13 (0x40+13)           /* Asks the selected card to send its status register. */
#define FATM1_CMD16 (0x40+16)           /* Sets a block length (in bytes) for all following block commands (read and
                                           write) of a Standard Capacity Card. Block length of the read and write
                                           commands are fixed to 512 bytes in a High Capacity Card. The length of
                                           LOCK_UNLOCK command is set by this command in both capacity cards.*/
#define FATM1_CMD17 (0x40+17)           /* Reads a block of the size selected by the SET_BLOCKLEN command.*/
#define FATM1_CMD18 (0x40+18)           /* Continuously transfers data blocks from card to host until interrupted by a
                                           STOP_TRANSMISSION command.*/
#define FATM1_CMD24 (0x40+24)           /* Writes a block of the size selected by the SET_BLOCKLEN command. */
#define FATM1_CMD25 (0x40+25)           /* Continuously writes blocks of data until ’Stop Tran’ token is sent
                                          (instead ’Start Block’).*/
#define FATM1_CMD27 (0x40+27)           /* Programming of the programmable bits of the CSD. */
#define FATM1_CMD28 (0x40+28)           /* If the card has write protection features, this command sets the write protection bit
                                           of the addressed group. The properties of write protection are coded in the card
                                           specific data (WP_GRP_SIZE). The High Capacity Card does not support this command.*/
#define FATM1_CMD29 (0x40+29)           /* If the card has write protection features, this command clears the write protection
                                           bit of the addressed group. The High Capacity Card does not support this command. */
#define FATM1_CMD30 (0x40+30)           /* If the card has write protection features, this command asks the card to send the
                                           status of the write protection bits.6 The High Capacity Card does not support this command. */
#define FATM1_CMD32 (0x40+32)           /* Sets the address of the first write block to be erased.*/
#define FATM1_CMD33 (0x40+33)           /* Sets the address of the last write block of the continuous range to be erased. */
#define FATM1_CMD38 (0x40+38)           /* Erases all previously selected write blocks */
#define FATM1_CMD42 (0x40+42)           /* Used to Set/Reset the Password or lock/unlock the card. A transferred data block includes
                                           all the command details - refer to Chapter 4.3.7. The size of the Data Block is defined
                                           with SET_BLOCK_LEN command. Reserved bits in the argument and in Lock Card Data Structure
                                           shall be set to 0. */
#define FATM1_CMD55 (0x40+55)           /* Defines to the card that the next command is an application specific command
                                           rather than a standard command */
#define FATM1_CMD56 (0x40+56)           /* Used either to transfer a Data Block to the card or to get a Data Block from the card
                                           for general purpose/application specific commands. In case of Standard Capacity SD
                                           Memory Card, the size of the Data Block shall be defined with SET_BLOCK_LEN command.
                                           Block length of this command is fixed to 512-byte in High Capacity Card. */
#define FATM1_CMD58 (0x40+58)           /* Reads the OCR register of a card. CCS bit is assigned to OCR[30]. */
#define FATM1_CMD59 (0x40+59)           /* Turns the CRC option on or off. A ‘1’ in the CRC option bit will turn the option on,
                                           a ‘0’ will turn it off */
#define FATM1_ACMD41 (0xC0+41)          /* SEND_OP_COND (SDC) */
#define FATM1_ACMD13 (0xC0+13)          /* SD_STATUS (SDC) */
#define FATM1_ACMD23 (0xC0+23)          /* SET_WR_BLK_ERASE_COUNT (SDC) */



uint8_t FATM1_Init(void* unused);
/*
** ===================================================================
**     Method      :  FATM1_Init (component SD_Card)
**     Description :
**         Initializes the driver
**     Parameters  :
**         NAME            - DESCRIPTION
**       * unused          - unused parameter
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void FATM1_Activate(void);
/*
** ===================================================================
**     Method      :  FATM1_Activate (component SD_Card)
**     Description :
**         If multiple devices are used on the same SPI bus, then the
**         device needs to be activated. That way, the different SPI
**         protocol is selected.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void FATM1_Deactivate(void);
/*
** ===================================================================
**     Method      :  FATM1_Deactivate (component SD_Card)
**     Description :
**         Removes/deactivates the card from the bus
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define FATM1_isWriteProtected() \
  FALSE                                 /* no hardware to detect write protection, thus none */

/*
** ===================================================================
**     Method      :  FATM1_isWriteProtected (component SD_Card)
**     Description :
**         Determines if the card is write protected. Note that this is
**         an indicator only, as it is still possible to write to the
**         card even if the write protection is set on the card!
**     Parameters  : None
**     Returns     :
**         ---             - True if the card has the write protection
**                           set, false otherwise
** ===================================================================
*/

uint8_t FATM1_WaitReady(void);
/*
** ===================================================================
**     Method      :  FATM1_WaitReady (component SD_Card)
**     Description :
**         Wait until the card is ready
**     Parameters  : None
**     Returns     :
**         ---             - Error code
**                           ERR_OK: device is ready
**                           ERR_BUSY: device is still busy
** ===================================================================
*/

bool FATM1_ReceiveDataBlock(uint8_t *data, uint16_t nofBytes);
/*
** ===================================================================
**     Method      :  FATM1_ReceiveDataBlock (component SD_Card)
**     Description :
**         Retrieve a data block from the device
**     Parameters  :
**         NAME            - DESCRIPTION
**       * data            - Pointer to data buffer
**         nofBytes        - number of bytes to retrieve,
**                           must be a multiple of 4
**     Returns     :
**         ---             - TRUE if reading was going fine, FALSE
**                           otherwise.
** ===================================================================
*/

uint8_t FATM1_SendCmd(uint8_t cmd, uint32_t arg);
/*
** ===================================================================
**     Method      :  FATM1_SendCmd (component SD_Card)
**     Description :
**         Sends a command to the device and returns the response
**     Parameters  :
**         NAME            - DESCRIPTION
**         cmd             - Command to send
**         arg             - command argument
**     Returns     :
**         ---             - device response
** ===================================================================
*/

uint8_t FATM1_ReceiveByte(void);
/*
** ===================================================================
**     Method      :  FATM1_ReceiveByte (component SD_Card)
**
**     Description :
**         Receives a byte from the SPI bus
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#define FATM1_CardPresent() \
  (bool)(CD2_GetVal(CD2_DeviceData)!=0) /* high level means card present */

/*
** ===================================================================
**     Method      :  FATM1_CardPresent (component SD_Card)
**     Description :
**         Returns true in case a card is present. If there is no card
**         detection pin, then this routine will always return true.
**     Parameters  : None
**     Returns     :
**         ---             - Returns true if card is present, false
**                           otherwise.
** ===================================================================
*/

bool FATM1_SendDataBlock(uint8_t *data, uint8_t token, uint16_t nofBytes);
/*
** ===================================================================
**     Method      :  FATM1_SendDataBlock (component SD_Card)
**     Description :
**         Send a data block to the device
**     Parameters  :
**         NAME            - DESCRIPTION
**       * data            - Pointer to data blocks with 512 bytes
**                           each
**         token           - data/stop token
**         nofBytes        - Number of bytes to send
**     Returns     :
**         ---             - Returns TRUE for success, FALSE for
**                           failure.
** ===================================================================
*/

void FATM1_SetFastMode(void);
/*
** ===================================================================
**     Method      :  FATM1_SetFastMode (component SD_Card)
**     Description :
**         Switches to fast mode SPI communication speed.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void FATM1_InitCommChannel(void);
/*
** ===================================================================
**     Method      :  FATM1_InitCommChannel (component SD_Card)
**     Description :
**         Method to initialize the communication channel. This is
**         needed if the bus to the SD card is shared with other
**         devices.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

uint8_t FATM1_Deinit(void* unused);
/*
** ===================================================================
**     Method      :  FATM1_Deinit (component SD_Card)
**     Description :
**         Driver deinitialization routine.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * unused          - dummy parameter
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void SM2_OnBlockReceived(LDD_TUserData *UserDataPtr);

void FATM1_SetSlowMode(void);
/*
** ===================================================================
**     Method      :  FATM1_SetSlowMode (component SD_Card)
**     Description :
**         Switches to slow mode SPI communication speed.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

/* END FATM1. */

#endif
/* ifndef __FATM1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
