/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : DS1.h
**     CDE edition : Community
**     Project     : FRDM-KL27Z_McuOnEclipseLib
**     Processor   : MKL25Z128VLK4
**     Component   : DS18B20
**     Version     : Component 01.016, Driver 01.00, CPU db: 3.00.000
**     Repository  : Legacy User Components
**     Compiler    : GNU C Compiler
**     Date/Time   : 2017-06-01, 12:02, # CodeGen: 227
**     Abstract    :
**
This is a component for the Maxim DS18B20 1-Wire temperature sensor.
**     Settings    :
**          Component Name                                 : DS1
**          Temperature Reading                            : Auto
**          Connection mode                                : Multiple slaves
**            Number of devices                            : 2
**              Sensor 64-bit ROM code                     : 28-87-99-37-09-00-00-75
**                Family code                              : 0x28
**                Serial number 1                          : 0x87
**                Serial number 2                          : 0x99
**                Serial number 3                          : 0x37
**                Serial number 4                          : 0x09
**                Serial number 5                          : 0x00
**                Serial number 6                          : 0x00
**                CRC                                      : 0x75
**              Sensor 64-bit ROM code                     : 28-1F-F9-35-09-00-00-73
**                Family code                              : 0x28
**                Serial number 1                          : 0x1F
**                Serial number 2                          : 0xF9
**                Serial number 3                          : 0x35
**                Serial number 4                          : 0x09
**                Serial number 5                          : 0x00
**                Serial number 6                          : 0x00
**                CRC                                      : 0x73
**          One Wire                                       : OW1
**          SDK                                            : MCUC1
**          Wait                                           : WAIT1
**          Shell                                          : Enabled
**            Shell                                        : CLS1
**            Utility                                      : UTIL1
**     Contents    :
**         ReadRom                 - uint8_t DS1_ReadRom(uint8_t sensor_index);
**         GetRomCode              - uint8_t DS1_GetRomCode(uint8_t sensor_index, uint8_t **romCodePtr);
**         isBusy                  - bool DS1_isBusy(void);
**         StartConversion         - uint8_t DS1_StartConversion(uint8_t sensor_index);
**         ReadTemperature         - uint8_t DS1_ReadTemperature(uint8_t sensor_index);
**         GetTemperatureRaw       - uint8_t DS1_GetTemperatureRaw(uint16_t sensor_index, uint32_t *raw);
**         GetTemperatureFloat     - uint8_t DS1_GetTemperatureFloat(uint8_t sensor_index, float *temperature);
**         ConvertAll              - uint8_t DS1_ConvertAll(void);
**         ReadResolution          - uint8_t DS1_ReadResolution(uint8_t sensor_index);
**         SetResolution           - uint8_t DS1_SetResolution(uint8_t sensor_index, DS18B20_ResolutionBits...
**         SearchAndAssignROMCodes - uint8_t DS1_SearchAndAssignROMCodes(void);
**         ParseCommand            - uint8_t DS1_ParseCommand(const unsigned char* cmd, bool *handled, const...
**         Init                    - void DS1_Init(void);
**         Deinit                  - void DS1_Deinit(void);
**
**     * Copyright (c) Original implementation: Omar Isaí Pinales Ayala, 2014, all rights reserved.
**      * Updated and maintained by Erich Styger, 2014-2017
**      * Web:         https://mcuoneclipse.com
**      * SourceForge: https://sourceforge.net/projects/mcuoneclipse
**      * Git:         https://github.com/ErichStyger/McuOnEclipse_PEx
**      * All rights reserved.
**      *
**      * Redistribution and use in source and binary forms, with or without modification,
**      * are permitted provided that the following conditions are met:
**      *
**      * - Redistributions of source code must retain the above copyright notice, this list
**      *   of conditions and the following disclaimer.
**      *
**      * - Redistributions in binary form must reproduce the above copyright notice, this
**      *   list of conditions and the following disclaimer in the documentation and/or
**      *   other materials provided with the distribution.
**      *
**      * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**      * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**      * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**      * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**      * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**      * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**      * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**      * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**      * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**      * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file DS1.h
** @version 01.00
** @brief
**
This is a component for the Maxim DS18B20 1-Wire temperature sensor.
*/         
/*!
**  @addtogroup DS1_module DS1 module documentation
**  @{
*/         

#ifndef __DS1_H
#define __DS1_H

/* MODULE DS1. */
#include "MCUC1.h" /* SDK and API used */
#include "DS1config.h" /* configuration */
#include "CLS1.h" /* Shell */

#ifdef __cplusplus
extern "C" {
#endif


/* sensor resolution */
typedef enum {
  DS18B20_RESOLUTION_BITS_9  = 0b00, /* conversion time: 93.75 ms */
  DS18B20_RESOLUTION_BITS_10 = 0b01, /* conversion time: 187.5 ms */
  DS18B20_RESOLUTION_BITS_11 = 0b10, /* conversion time: 375 ms */
  DS18B20_RESOLUTION_BITS_12 = 0b11  /* conversion time: 750 ms */
} DS18B20_ResolutionBits;

#define DS18B20_FAMILY_CODE    0x28  /* 8-bit family code for DS128B20 */
#define DS18B20_ROM_CODE_SIZE  8     /* 8 byte ROM code (family ID, 6 bytes for ID plus 1 byte CRC */

#define DS1_PARSE_COMMAND_ENABLED  DS1_CONFIG_PARSE_COMMAND_ENABLED
  /*!< set to 1 if method ParseCommand() is present, 0 otherwise */
uint8_t DS1_StartConversion(uint8_t sensor_index);
/*
** ===================================================================
**     Method      :  DS1_StartConversion (component DS18B20)
**     Description :
**         Starts the conversion of temperature in the sensor.
**     Parameters  :
**         NAME            - DESCRIPTION
**         sensor_index    - Sensor index, use zero
**                           if only using one sensor
**     Returns     :
**         ---             - error code
** ===================================================================
*/

uint8_t DS1_SetResolution(uint8_t sensor_index, DS18B20_ResolutionBits resolution);
/*
** ===================================================================
**     Method      :  DS1_SetResolution (component DS18B20)
**     Description :
**         Sets the resolution
**     Parameters  :
**         NAME            - DESCRIPTION
**         sensor_index    - Index of the sensor to
**                           set the resolution.
**         config_bits     - Two bits resolution config
**                           value: 
**                           [0b00] - 9 bits.
**                           [0b01] - 10 bits.
**                           [0b10] - 11 bits.
**                           [0b11] - 12 bits.
**     Returns     :
**         ---             - error code
** ===================================================================
*/

uint8_t DS1_ConvertAll(void);
/*
** ===================================================================
**     Method      :  DS1_ConvertAll (component DS18B20)
**     Description :
**         Convert temperature for all sensors
**     Parameters  : None
**     Returns     :
**         ---             - error code
** ===================================================================
*/

uint8_t DS1_ReadTemperature(uint8_t sensor_index);
/*
** ===================================================================
**     Method      :  DS1_ReadTemperature (component DS18B20)
**     Description :
**         Read the temperature value from the sensor and stores it in
**         memory
**     Parameters  :
**         NAME            - DESCRIPTION
**         sensor_index    - Sensor index, use zero
**                           if only using one sensor
**     Returns     :
**         ---             - error code
** ===================================================================
*/

uint8_t DS1_GetTemperatureRaw(uint16_t sensor_index, uint32_t *raw);
/*
** ===================================================================
**     Method      :  DS1_GetTemperature (component DS18B20)
**     Description :
**         Gets the temperature from memory.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * sensor_index    - Index of the sensor to
**                           get the temperature value.
**     Returns     :
**         ---             - 
** ===================================================================
*/

bool DS1_isBusy(void);
/*
** ===================================================================
**     Method      :  DS1_isBusy (component DS18B20)
**     Description :
**         Returns TRUE if there are a operation in progress.
**     Parameters  : None
**     Returns     :
**         ---             - Returns TRUE if the device is busy, and
**                           FALSE if its ready to operate.
** ===================================================================
*/

uint8_t DS1_GetRomCode(uint8_t sensor_index, uint8_t **romCodePtr);
/*
** ===================================================================
**     Method      :  DS1_GetRomCode (component DS18B20)
**     Description :
**         Gets the rom code from the memory.
**     Parameters  :
**         NAME            - DESCRIPTION
**         sensor_index    - Sensor index, use zero
**                           if only using one sensor
**       * romCodePtr      - Pointer to a pointer for the
**                           return value
**     Returns     :
**         ---             - error code
** ===================================================================
*/

uint8_t DS1_ReadRom(uint8_t sensor_index);
/*
** ===================================================================
**     Method      :  DS1_ReadRom (component DS18B20)
**     Description :
**         Starts to read the rom code and saves it in memory.
**     Parameters  :
**         NAME            - DESCRIPTION
**         sensor_index    - Sensor index, use zero
**                           if only using one sensor
**     Returns     :
**         ---             - error code
** ===================================================================
*/

void DS1_Init(void);
/*
** ===================================================================
**     Method      :  DS1_Init (component DS18B20)
**     Description :
**         Initializes the device.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

uint8_t DS1_GetTemperatureFloat(uint8_t sensor_index, float *temperature);
/*
** ===================================================================
**     Method      :  DS1_GetTemperatureFloat (component DS18B20)
**     Description :
**         Returns the temperature from memory in floating point format.
**     Parameters  :
**         NAME            - DESCRIPTION
**         sensor_index    - Sensor index, use zero
**                           if only using one sensor
**       * temperature     - Pointer to where to store
**                           the value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t DS1_ParseCommand(const unsigned char* cmd, bool *handled, const CLS1_StdIOType *io);
/*
** ===================================================================
**     Method      :  DS1_ParseCommand (component DS18B20)
**     Description :
**         Shell Command Line parser. Method is only available if Shell
**         is enabled in the component properties.
**     Parameters  :
**         NAME            - DESCRIPTION
**         cmd             - command string
**       * handled         - Pointer to variable which tells if
**                           the command has been handled or not
**         io              - Pointer to I/O structure
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void DS1_Deinit(void);
/*
** ===================================================================
**     Method      :  DS1_Deinit (component DS18B20)
**     Description :
**         Driver deinitialization routine
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

uint8_t DS1_ReadResolution(uint8_t sensor_index);
/*
** ===================================================================
**     Method      :  DS1_ReadResolution (component DS18B20)
**     Description :
**         Read the sensor resolution sensor and stores it in memory
**     Parameters  :
**         NAME            - DESCRIPTION
**         sensor_index    - Sensor index, use zero
**                           if only using one sensor
**     Returns     :
**         ---             - error code
** ===================================================================
*/

uint8_t DS1_SearchAndAssignROMCodes(void);
/*
** ===================================================================
**     Method      :  DS1_SearchAndAssignROMCodes (component DS18B20)
**     Description :
**         Scans the devices on the bus and assigns the ROM codes to
**         the list of available sensors
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

/* END DS1. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __DS1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
