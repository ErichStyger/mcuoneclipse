/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : FDisp1.h
**     Project     : FRDM-K64F_Adafruit_SSD1351
**     Processor   : MK64FN1M0VLL12
**     Component   : FontDisplay
**     Version     : Component 01.201, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2024-01-28, 09:20, # CodeGen: 5
**     Abstract    :
**          Driver to write fonts using GFont component
**     Settings    :
**          Bean name                                      : FDisp1
**          System                                         : 
**            InhGDisplay                                  : GDisp1
**     Contents    :
**         GetFontHeight    - void FDisp1_GetFontHeight(FDisp1_Font *font, FDisp1_PixelDim *charHeight,...
**         GetStringHeight  - FDisp1_PixelDim FDisp1_GetStringHeight(uint8_t *str, FDisp1_Font *font,...
**         GetCharWidth     - void FDisp1_GetCharWidth(uint8_t ch, FDisp1_PixelDim *charWidth,...
**         GetStringWidth   - FDisp1_PixelDim FDisp1_GetStringWidth(uint8_t *str, FDisp1_Font *font,...
**         WriteString      - void FDisp1_WriteString(uint8_t *str, FDisp1_PixelColor color,...
**         WriteStringWidth - void FDisp1_WriteStringWidth(uint8_t *str, FDisp1_PixelColor color,...
**         WriteChar        - void FDisp1_WriteChar(uint8_t ch, FDisp1_PixelColor color, FDisp1_PixelDim...
**         Deinit           - void FDisp1_Deinit(void);
**         Init             - void FDisp1_Init(void);
**
** * Copyright (c) 2011-2020, Erich Styger
**  * Web:         https://mcuoneclipse.com
**  * SourceForge: https://sourceforge.net/projects/mcuoneclipse
**  * Git:         https://github.com/ErichStyger/McuOnEclipse_PEx
**  * All rights reserved.
**  *
**  * Redistribution and use in source and binary forms, with or without modification,
**  * are permitted provided that the following conditions are met:
**  *
**  * - Redistributions of source code must retain the above copyright notice, this list
**  *   of conditions and the following disclaimer.
**  *
**  * - Redistributions in binary form must reproduce the above copyright notice, this
**  *   list of conditions and the following disclaimer in the documentation and/or
**  *   other materials provided with the distribution.
**  *
**  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file FDisp1.h
** @version 01.00
** @brief
**          Driver to write fonts using GFont component
*/         
/*!
**  @addtogroup FDisp1_module FDisp1 module documentation
**  @{
*/         

#ifndef __FDisp1_H
#define __FDisp1_H

/* MODULE FDisp1. */
#include "MCUC1.h" /* SDK and API used */
#include "FDisp1config.h" /* configuration */
#include "GDisp1.h" /* Graphic display interface */
#include "Helv14.h" /* Font interface */

#ifdef __cplusplus
extern "C" {
#endif

typedef GDisp1_PixelDim   FDisp1_PixelDim; /* Type which can hold a integral type for the x/y pixel dimension. This is depending on the display used. */
typedef GDisp1_PixelColor FDisp1_PixelColor; /* Type defining the color type (depends on display used). */
typedef GFONT_Callbacks FDisp1_Font;   /* Pointer to GFONT_Callbacks */



void FDisp1_WriteString(uint8_t *str, FDisp1_PixelColor color, FDisp1_PixelDim *xCursor, FDisp1_PixelDim *yCursor, FDisp1_Font *font);
/*
** ===================================================================
**     Method      :  WriteString (component FontDisplay)
**
**     Description :
**         Function to write a string or character at the startpoint.
**         Set the startpoint with the function setCursor.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * str             - Pointer to the character string
**         color           - Foreground color to be used (for the
**                           character pixels)
**       * xCursor         - Pointer to x position of first
**                           character (upper left corner). On return
**                           this will contain the next y position.
**       * yCursor         - Pointer to y position of character
**                           (upper left corner). On return this will
**                           contain the next y position.
**       * font            - Pointer to font information
**     Returns     : Nothing
** ===================================================================
*/

void FDisp1_WriteChar(uint8_t ch, FDisp1_PixelColor color, FDisp1_PixelDim *xCursor, FDisp1_PixelDim *yCursor, FDisp1_Font *font);
/*
** ===================================================================
**     Method      :  WriteChar (component FontDisplay)
**
**     Description :
**         Function to write a character at the start point. Set the
**         start point with the function setCursor.
**     Parameters  :
**         NAME            - DESCRIPTION
**         ch              - the character to print
**         color           - Foreground color to be used (for the
**                           character pixels)
**       * xCursor         - Pointer to x position of character
**                           (upper left corner). On return this will
**                           contain the next x position.
**       * yCursor         - Pointer to y position of character
**                           (upper left corner). On return this will
**                           contain the next y position.
**       * font            - Pointer to font information
**     Returns     : Nothing
** ===================================================================
*/

void FDisp1_GetCharWidth(uint8_t ch, FDisp1_PixelDim *charWidth, FDisp1_PixelDim *totalWidth, FDisp1_Font *font);
/*
** ===================================================================
**     Method      :  GetCharWidth (component FontDisplay)
**
**     Description :
**         returns the width (in pixels) of a font character.
**     Parameters  :
**         NAME            - DESCRIPTION
**         ch              - character for which to calculate the width
**       * charWidth       - Pointer to width of the
**                           character in pixels (this is only for the
**                           character, without the space after the
**                           character)
**       * totalWidth      - Pointer to the total width
**                           of the character, including to the space
**                           after the character.
**       * font            - Pointer to font information
**     Returns     : Nothing
** ===================================================================
*/

FDisp1_PixelDim FDisp1_GetStringWidth(uint8_t *str, FDisp1_Font *font, FDisp1_PixelDim *lastCharSpace);
/*
** ===================================================================
**     Method      :  GetStringWidth (component FontDisplay)
**
**     Description :
**         returns the width (in pixels) of a font string. For multiple
**         line strings (separated by \
**         ) or for strings with \r it returns the longest string
**         length.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * str             - Pointer to the string.
**       * font            - Pointer to font information
**       * lastCharSpace   - Pointer to the width
**                           of the last character space, useful if you
**                           combine multiple strings. The pointer may
**                           be NULL.
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void FDisp1_GetFontHeight(FDisp1_Font *font, FDisp1_PixelDim *charHeight, FDisp1_PixelDim *totalHeight);
/*
** ===================================================================
**     Method      :  GetFontHeight (component FontDisplay)
**
**     Description :
**         returns the height (in pixels) of a font.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * font            - Pointer to font information
**       * charHeight      - Pointer to height of the
**                           character in pixels.
**       * totalHeight     - Pointer to the total
**                           height of the character, including to the
**                           space below the character.
**     Returns     : Nothing
** ===================================================================
*/

FDisp1_PixelDim FDisp1_GetStringHeight(uint8_t *str, FDisp1_Font *font, FDisp1_PixelDim *lastLineSpace);
/*
** ===================================================================
**     Method      :  GetStringHeight (component FontDisplay)
**
**     Description :
**         returns the height (in pixels) of a font string. For
**         multiple line strings (separated by newline) or for strings
**         with \r it returns the longest list.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * str             - Pointer to the string.
**       * font            - Pointer to font information
**       * lastLineSpace   - Pointer to the height
**                           of the last line space, useful if you
**                           combine multiple strings. The pointer may
**                           be NULL.
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void FDisp1_Deinit(void);
/*
** ===================================================================
**     Method      :  Deinit (component FontDisplay)
**
**     Description :
**         Driver de-initialization
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void FDisp1_Init(void);
/*
** ===================================================================
**     Method      :  Init (component FontDisplay)
**
**     Description :
**         Driver initialization
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void FDisp1_WriteStringWidth(uint8_t *str, FDisp1_PixelColor color, FDisp1_PixelDim *xCursor, FDisp1_PixelDim *yCursor, FDisp1_Font *font, FDisp1_PixelDim width);
/*
** ===================================================================
**     Method      :  WriteStringWidth (component FontDisplay)
**
**     Description :
**         Function to write a string or character at the startpoint.
**         Set the startpoint with the function setCursor. If the
**         string reaches the given width, the text gets wrapped to a
**         new line.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * str             - Pointer to the character string
**         color           - Foreground color to be used (for the
**                           character pixels)
**       * xCursor         - Pointer to x position of first
**                           character (upper left corner). On return
**                           this will contain the next y position.
**       * yCursor         - Pointer to y position of character
**                           (upper left corner). On return this will
**                           contain the next y position.
**       * font            - Pointer to font information
**         width           - Maximum of width of the text box. If
**                           text reaches the end of the box, the text
**                           gets wrapped to a new line.
**     Returns     : Nothing
** ===================================================================
*/

/* END FDisp1. */

#ifdef __cplusplus
}
#endif

#endif
/* ifndef __FDisp1_H */
/*!
** @}
*/
